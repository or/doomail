#!/usr/bin/env bb
(ns ormail
  (:require [babashka.cli :as cli]
            [babashka.fs :as fs]
            [babashka.process :as process]
            [clojure.edn :as edn]
            [clojure.string :as str]
            [taoensso.timbre :as timbre]))

(defn- log-info [{:keys [quiet]} message]
  (when-not quiet
    (timbre/info message)))

(defn- shell-to-string [command]
  (-> (process/shell {:out :string} command)
      :out
      str/trim))

(defn- shell-to-list [command]
  (filter (comp not str/blank?)
          (-> (shell-to-string command)
              (str/split #"\n"))))

(defn- shell [{:keys [quiet]} command]
  (process/shell (when quiet
                   {:out :string
                    :err :string})
                 command))

(defn- notmuch-count [condition]
  (Integer/parseInt (shell-to-string (format "notmuch count %s" condition))))

(defn- command-update [{:keys [xbar]
                        :as opts}]
  (log-info opts "updating database...")
  (shell opts "notmuch new")
  (let [new-count (notmuch-count "--output=messages tag:new")]
    (shell opts "notmuch tag -new tag:new")
    (print (if (zero? new-count)
             "no new mail"
             (format "%d new mails" new-count)))
    (when xbar
      (print (format " | color=%s"
                     (if (zero? new-count)
                       "#606060"
                       "green"))))
    (println)))

(defn- remove-uid-from-filename [filename]
  (str/replace filename #",U=.*$" ""))

(defn- make-unique [filename]
  (let [counter (atom 0)]
    (loop [filename filename]
      (if (fs/exists? filename)
        (do
          (swap! counter inc)
          (recur (str filename "__" @counter)))
        filename))))

(defn- command-archive [opts]
  (log-info opts "archiving mail...")
  (shell opts "notmuch tag +archived NOT tag:archived AND NOT tag:unread AND NOT tag:inbox AND date:..31-days")
  (let [database-path (shell-to-string "notmuch config get database.path")
        database-path (str/replace database-path #"/+$" "")
        database-path-with-slash (str database-path "/")
        files-to-archive (shell-to-list "notmuch search --output=files tag:archived AND NOT 'folder:/archive\\/.*/'")]
    (doseq [filename files-to-archive]
      (assert (str/starts-with? filename database-path-with-slash)
              (format "filename not inside database-path (%s): %s" database-path filename))
      (let [relative-path (str/replace-first filename database-path-with-slash "")
            relative-path-without-uid (remove-uid-from-filename relative-path)
            archive-filename (format "%s/archive/%s" database-path relative-path-without-uid)
            archive-filename (make-unique archive-filename)
            archive-filename-directory (str/replace archive-filename #"/[^/]*$" "")]
        (shell opts (format "mkdir -p '%s'" archive-filename-directory))
        (shell opts (format "mv '%s' '%s'" filename archive-filename))))))

(defn- command-sync [{:keys [archive]
                      :as opts}]
  (log-info opts "syncing mail...")
  (when archive
    (command-archive opts))
  (shell opts "mbsync -a")
  (command-update opts))

(defn- command-fix-duplicate-uids [{:keys [directory]
                                    :as opts}]
  (assert directory)
  (let [files (shell-to-list (format "ls -1 '%s'" directory))
        uids (into {}
                   (keep (fn [filename]
                           (when-let [[_ uid] (re-find #",U=(\d+):" filename)]
                             [filename uid]))
                         files))
        grouped-by-uid (group-by uids files)]
    (doseq [[uid filenames] grouped-by-uid]
      (let [filenames-to-fix (drop 1 filenames)]
        (when (pos? (count filenames-to-fix))
          (log-info opts (format "fixing %d message(s) duplicating UID %s" (count filenames-to-fix) uid))
          (doseq [filename filenames-to-fix]
            (let [fixed-filename (remove-uid-from-filename filename)]
              (shell opts (format "mv '%s/%s' '%s/%s'" directory filename directory fixed-filename)))))))))

(defn- command-count-unread [{:keys [xbar]}]
  (let [unread-count (notmuch-count "--output=threads tag:unread")]
    (print (if (pos? unread-count)
             (format ":incoming_envelope: %d threads" unread-count)
             "no unread mail"))
    (when xbar
      (print (format " | color=%s"
                     (if (pos? unread-count)
                       "red"
                       "#707070"))))
    (println)))

(defn- exclude-address [exclude address]
  (when exclude
    (re-find exclude address)))

(defn- filter-address [pattern address]
  (let [pattern (map str/lower-case pattern)
        address (str/lower-case address)]
    (loop [[word & rest] pattern]
      (if word
        (if (str/includes? address word)
          (recur rest)
          false)
        true))))

(defn- command-addresses [{:keys [exclude pattern]}]
  (->> (shell-to-list "notmuch address NOT tag:spam'")
       (remove (partial exclude-address (when exclude
                                          (re-pattern exclude))))
       (filter (partial filter-address pattern))
       (str/join "\n")
       println))

(defn- command-help [_opts]
  (println "Usage:
    ormail --help
    ormail <command> [args...]

Commands:
  help                              show this help
  sync [--archive]                  sync the local mail dir with remote IMAP servers
  update                            update the notmuch database based on the files in mail dir,
                                    done automatically during sync
  count-unread                      count unread threads
  addresses [--exclude <regexp>]    list all addresses, exclude those matching the given pattern
  fix-uids --directory <directory>  fix UID duplication in a mail dir directory

General options:
  --quiet                           print only the necessary output
  --xbar                            output responses in a format suitable for xbar plugins, implies --quiet
"))

(def ^:private commands
  {:help command-help
   :sync command-sync
   :archive command-archive
   :update command-update
   :count-unread command-count-unread
   :addresses command-addresses
   :fix-uids command-fix-duplicate-uids})

(defn- main [{:keys [opts]}]
  (let [config-file (str (fs/expand-home "~/.ormail.edn"))
        config (when (fs/exists? config-file)
                 (edn/read-string (slurp config-file)))
        opts (cond-> opts
               (:xbar opts) (assoc :quiet true))
        command (:command opts)
        show-help? (:help opts)
        config-opts (get config command)]
    (if (and show-help?
             (not command))
      (command-help opts)
      (apply (get commands command) [(merge config-opts opts)]))))

(main (cli/parse-args *command-line-args*
                      {:coerce {:command :keyword
                                :xbar :boolean
                                :help :boolean
                                :quiet :boolean
                                :exclude :string
                                :pattern [:string]}
                       :validate {:command commands}
                       :args->opts [:command :pattern]}))
