#!/usr/bin/env bb
(require '[babashka.cli :as cli])
(require '[babashka.fs :as fs])
(require '[babashka.process :as process])
(require '[clojure.string :as str])
(require '[taoensso.timbre :as timbre])

(defn- shell-to-string [command]
  (-> (process/shell {:out :string} command)
      :out
      str/trim))

(defn- shell-to-list [command]
  (filter (comp not str/blank?)
          (-> (shell-to-string command)
              (str/split #"\n"))))

(defn- notmuch-count [condition]
  (Integer/parseInt (shell-to-string (format "notmuch count %s" condition))))

(defn- update-db [{:keys [xbar]}]
  (timbre/info "updating database...")
  (process/shell "notmuch new")
  (let [new-count (notmuch-count "--output=messages tag:new")]
    (process/shell "notmuch tag -new tag:new")
    (print (if (zero? new-count)
             "no new mail"
             (format "%d new mails" new-count)))
    (when xbar
      (print (format " | color=%s"
                     (if (zero? new-count)
                       "#606060"
                       "green"))))
    (println)))

(defn- remove-uid-from-filename [filename]
  (str/replace filename #",U=.*$" ""))

(defn- make-unique [filename]
  (let [counter (atom 0)]
    (loop [filename filename]
      (if (fs/exists? filename)
        (do
          (swap! counter inc)
          (recur (str filename "__" @counter)))
        filename))))

(defn- archive [_opts]
  (timbre/info "archiving mail...")
  (process/shell "notmuch tag +archived NOT tag:archived AND NOT tag:unread AND NOT tag:inbox AND date:..31-days")
  (let [database-path (shell-to-string "notmuch config get database.path")
        database-path (str/replace database-path #"/+$" "")
        database-path-with-slash (str database-path "/")
        files-to-archive (shell-to-list "notmuch search --output=files tag:archived AND NOT 'folder:/archive\\/.*/'")]
    (doseq [filename files-to-archive]
      (assert (str/starts-with? filename database-path-with-slash)
              (format "filename not inside database-path (%s): %s" database-path filename))
      (let [relative-path (str/replace-first filename database-path-with-slash "")
            relative-path-without-uid (remove-uid-from-filename relative-path)
            archive-filename (format "%s/archive/%s" database-path relative-path-without-uid)
            archive-filename (make-unique archive-filename)
            archive-filename-directory (str/replace archive-filename #"/[^/]*$" "")]
        (process/shell (format "mkdir -p '%s'" archive-filename-directory))
        (process/shell (format "mv '%s' '%s'" filename archive-filename))))))

(defn- sync-mail [opts]
  (timbre/info "syncing mail...")
  (archive opts)
  (process/shell "mbsync -a")
  (update-db opts))

(defn- fix-duplicate-uids [{:keys [directory]}]
  (assert directory)
  (let [files (shell-to-list (format "ls -1 '%s'" directory))
        uids (into {}
                   (keep (fn [filename]
                           (when-let [[_ uid] (re-find #",U=(\d+):" filename)]
                             [filename uid]))
                         files))
        grouped-by-uid (group-by uids files)]
    (doseq [[uid filenames] grouped-by-uid]
      (let [filenames-to-fix (drop 1 filenames)]
        (when (pos? (count filenames-to-fix))
          (timbre/info "fixing" (count filenames-to-fix) "message(s) duplicating UID" uid)
          (doseq [filename filenames-to-fix]
            (let [fixed-filename (remove-uid-from-filename filename)]
              (process/shell (format "mv '%s/%s' '%s/%s'" directory filename directory fixed-filename)))))))))

(defn- count-unread [{:keys [xbar]}]
  (let [unread-count (notmuch-count "--output=threads tag:unread")]
    (print (if (pos? unread-count)
             (format ":incoming_envelope: %d threads" unread-count)
             "no unread mail"))
    (when xbar
      (print (format " | color=%s"
                     (if (pos? unread-count)
                       "red"
                       "#707070"))))
    (println)))

(defn- help [_opts]
  (println "Usage:
    ormail --help
    ormail <command> [args...]

Commands:
  help                              show this help
  sync                              sync the local mail dir with remote IMAP servers
  update                            update the notmuch database based on the files in mail dir,
                                    done automatically during sync
  count-unread                      count unread threads
  fix-uids --directory <directory>  fix UID duplication in a mail dir directory
"))

(def ^:private commands
  {:help help
   :sync sync-mail
   :archive archive
   :update update-db
   :count-unread count-unread
   :fix-uids fix-duplicate-uids})

(defn- main [{:keys [opts]}]
  (let [command (:command opts)
        show-help? (:help opts)]
    (if (and show-help?
             (not command))
      (help opts)
      (apply (get commands command) [opts]))))

(main (cli/parse-args *command-line-args*
                      {:coerce {:command :keyword
                                :xbar :boolean
                                :help :boolean}
                       :validate {:command commands}
                       :exec-args {:output :default}
                       :args->opts [:command]}))
